---

run:
  go: '1.22'

linters:
  enable:
    - asasalint
    - asciicheck
    - bodyclose
    - containedctx
    - contextcheck
    - decorder
    - durationcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    # - exportloopref
    - copyloopvar
    - forbidigo
    - forcetypeassert
    - gci
    - gochecknoglobals
    - gochecknoinits
    - goconst
    - gocritic
    - goimports
    # - gomnd
    - gosec
    - grouper
    - ireturn
    - loggercheck
    - makezero
    - misspell
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nonamedreturns
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - reassign
    - revive
    # - rowserrcheck # disabled because of generics
    # - sqlclosecheck # disabled because of generics
    - tagliatelle
    - tenv
    - tparallel
    - unconvert
    - unparam
    - usestdlibvars
    - varnamelen
    # - wastedassign # disabled because of generics
    - whitespace
    - wrapcheck
    # - wsl

linters-settings:
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope." (defaults to 5)
    # Variables used in at most this many lines will be ignored.
    max-distance: 5
    # The minimum length of a variable's name that is considered "long." (defaults to 3)
    # Variable names that are at least this long will be ignored.
    min-name-length: 2
    # Check method receivers. (defaults to false)
    check-receiver: false
    # Check named return values. (defaults to false)
    check-return: false
    # Check type parameters. (defaults to false)
    check-type-param: false
    # Ignore "ok" variables that hold the bool return value of a type assertion. (defaults to false)
    ignore-type-assert-ok: false
    # Ignore "ok" variables that hold the bool return value of a map index. (defaults to false)
    ignore-map-index-ok: false
    # Ignore "ok" variables that hold the bool return value of a channel receive. (defaults to false)
    ignore-chan-recv-ok: false
    # Optional list of variable names that should be ignored completely. (defaults to empty list)
    ignore-names:
      - err
    # Optional list of variable declarations that should be ignored completely. (defaults to empty list)
    # Entries must be in one of the following forms (see below for examples):
    # - for variables, parameters, named return values, method receivers, or type parameters:
    #   <name> <type>  (<type> can also be a pointer/slice/map/chan/...)
    # - for constants: const <name>
    ignore-decls:
    #   - c echo.Context
    #   - t testing.T
    #   - f *foo.Bar
    #   - e error
    #   - i int
    #   - const C
    #   - T any
    #   - m map[string]int
      - w http.ResponseWriter
      - r *http.Request
    #   - q Queriable
      - q fidl.Queryable
    #   - tx fidl.Queryable
      - r chi.Router
    #   - tx ...fidl.Queryable
    #   - id int64
  ireturn:
    allow:
      - Queryable
      - error
      - driver.Value
  wrapcheck:
    # An array of glob patterns which, if any match the package of the function
    # returning the error, will skip wrapcheck analysis for this error. This is
    # useful for broadly ignoring packages and/or subpackages from wrapcheck
    # analysis. There are no defaults for this value.
    ignorePackageGlobs:
      - encoding/json*
  nlreturn:
    block-size: 2
